{"version":3,"sources":["../../src/schema/infer-graphql-input-fields-from-fields.js"],"names":["inferInputObjectStructureFromFields","require","GraphQLInputObjectType","GraphQLBoolean","GraphQLString","GraphQLFloat","GraphQLInt","GraphQLID","GraphQLList","GraphQLEnumType","GraphQLNonNull","GraphQLScalarType","GraphQLObjectType","GraphQLInterfaceType","GraphQLUnionType","_","report","createTypeName","createKey","makeNullable","type","ofType","convertToInputType","typeMap","has","nextTypeMap","Set","fields","transform","getFields","out","fieldConfig","key","Object","keys","length","name","innerType","message","verbose","scalarFilterMap","Int","eq","ne","Float","ID","String","regex","glob","Boolean","convertToInputFilter","prefix","upperFirst","innerFilter","innerFields","in","extractFieldNamesFromInputField","accu","push","each","typeName","inferredFields","sort","inputType","inputFilter"],"mappings":";;;;;;;;QA4KgBA,mC,GAAAA,mC;;;;eA5JZC,QAAS,SAAT,C;IAbFC,sB,YAAAA,sB;IACAC,c,YAAAA,c;IACAC,a,YAAAA,a;IACAC,Y,YAAAA,Y;IACAC,U,YAAAA,U;IACAC,S,YAAAA,S;IACAC,W,YAAAA,W;IACAC,e,YAAAA,e;IACAC,c,YAAAA,c;IACAC,iB,YAAAA,iB;IACAC,iB,YAAAA,iB;IACAC,oB,YAAAA,oB;IACAC,gB,YAAAA,gB;;AAKF,IAAMC,IAAId,QAAS,QAAT,CAAV;AACA,IAAMe,SAASf,QAAS,yBAAT,CAAf;AACA,IAAMgB,iBAAiBhB,QAAS,oBAAT,CAAvB;AACA,IAAMiB,YAAYjB,QAAS,cAAT,CAAlB;;AAQA,SAASkB,YAAT,CAAsBC,IAAtB,EAA6E;AAC3E,MAAIA,gBAAgBV,cAApB,EAAoC;AAClC,WAAOU,KAAKC,MAAZ;AACD;AACD,SAAOD,IAAP;AACD;;AAED,SAASE,kBAAT,CACEF,IADF,EAEEG,OAFF,EAGqB;AACnB;AACA,MAAIA,QAAQC,GAAR,CAAYJ,IAAZ,CAAJ,EAAuB;AACrB,WAAO,IAAP;AACD;AACD,MAAMK,cAAc,IAAIC,GAAJ,WAAYH,OAAZ,GAAqBH,IAArB,GAApB;;AAEA,MAAIA,gBAAgBT,iBAAhB,IAAqCS,gBAAgBX,eAAzD,EAA0E;AACxE,WAAOW,IAAP;AACD,GAFD,MAEO,IAAIA,gBAAgBR,iBAApB,EAAuC;AAC5C,QAAMe,SAASZ,EAAEa,SAAF,CAAYR,KAAKS,SAAL,EAAZ,EAA8B,UAACC,GAAD,EAAMC,WAAN,EAAmBC,GAAnB,EAA2B;AACtE,UAAMZ,OAAOE,mBAAmBS,YAAYX,IAA/B,EAAqCK,WAArC,CAAb;AACA,UAAIL,IAAJ,EAAUU,IAAIE,GAAJ,IAAW,EAAEZ,IAAF,EAAX;AACX,KAHc,CAAf;AAIA,QAAIa,OAAOC,IAAP,CAAYP,MAAZ,EAAoBQ,MAApB,KAA+B,CAAnC,EAAsC;AACpC,aAAO,IAAP;AACD;AACD,WAAO,IAAIjC,sBAAJ,CAA2B;AAChCkC,YAAMnB,eAAgB,GAAEG,KAAKgB,IAAK,aAA5B,CAD0B;AAEhCT;AAFgC,KAA3B,CAAP;AAID,GAZM,MAYA,IAAIP,gBAAgBZ,WAApB,EAAiC;AACtC,QAAI6B,YAAYf,mBAAmBF,KAAKC,MAAxB,EAAgCI,WAAhC,CAAhB;AACA,WAAOY,YAAY,IAAI7B,WAAJ,CAAgBW,aAAakB,SAAb,CAAhB,CAAZ,GAAuD,IAA9D;AACD,GAHM,MAGA,IAAIjB,gBAAgBV,cAApB,EAAoC;AACzC,QAAI2B,aAAYf,mBAAmBF,KAAKC,MAAxB,EAAgCI,WAAhC,CAAhB;AACA,WAAOY,aAAY,IAAI3B,cAAJ,CAAmBS,aAAakB,UAAb,CAAnB,CAAZ,GAA0D,IAAjE;AACD,GAHM,MAGA;AACL,QAAIC,UAAUlB,OAAQ,aAAYA,KAAKgB,IAAK,EAA9B,GAAmC,EAAjD;AACA,QAAIhB,gBAAgBP,oBAApB,EAA0C;AACxCyB,gBAAW,4CAA2CA,OAAQ,EAA9D;AACD,KAFD,MAEO,IAAIlB,gBAAgBN,gBAApB,EAAsC;AAC3CwB,gBAAW,wCAAuCA,OAAQ,EAA1D;AACD,KAFM,MAEA;AACLA,gBAAW,sBAAqBA,OAAQ,EAAxC;AACD;AACDtB,WAAOuB,OAAP,CAAeD,OAAf;AACD;;AAED,SAAO,IAAP;AACD;;AAED,IAAME,kBAAkB;AACtBC,OAAK;AACHC,QAAI,EAAEtB,MAAMd,UAAR,EADD;AAEHqC,QAAI,EAAEvB,MAAMd,UAAR;AAFD,GADiB;AAKtBsC,SAAO;AACLF,QAAI,EAAEtB,MAAMf,YAAR,EADC;AAELsC,QAAI,EAAEvB,MAAMf,YAAR;AAFC,GALe;AAStBwC,MAAI;AACFH,QAAI,EAAEtB,MAAMb,SAAR,EADF;AAEFoC,QAAI,EAAEvB,MAAMb,SAAR;AAFF,GATkB;AAatBuC,UAAQ;AACNJ,QAAI,EAAEtB,MAAMhB,aAAR,EADE;AAENuC,QAAI,EAAEvB,MAAMhB,aAAR,EAFE;AAGN2C,WAAO,EAAE3B,MAAMhB,aAAR,EAHD;AAIN4C,UAAM,EAAE5B,MAAMhB,aAAR;AAJA,GAbc;AAmBtB6C,WAAS;AACPP,QAAI,EAAEtB,MAAMjB,cAAR,EADG;AAEPwC,QAAI,EAAEvB,MAAMjB,cAAR;AAFG;AAnBa,CAAxB;;AAyBA,SAAS+C,oBAAT,CACEC,MADF,EAEE/B,IAFF,EAG2B;AACzB,MAAIA,gBAAgBT,iBAApB,EAAuC;AACrC,QAAMyB,OAAOhB,KAAKgB,IAAlB;AACA,QAAMT,SAASa,gBAAgBJ,IAAhB,CAAf;;AAEA,QAAIT,UAAU,IAAd,EAAoB,OAAO,IAAP;AACpB,WAAO,IAAIzB,sBAAJ,CAA2B;AAChCkC,YAAMnB,eAAgB,GAAEkC,MAAO,QAAOf,IAAK,EAArC,CAD0B;AAEhCT,cAAQA;AAFwB,KAA3B,CAAP;AAID,GATD,MASO,IAAIP,gBAAgBlB,sBAApB,EAA4C;AACjD,WAAO,IAAIA,sBAAJ,CAA2B;AAChCkC,YAAMnB,eAAgB,GAAEkC,MAAO,aAAzB,CAD0B;AAEhCxB,cAAQZ,EAAEa,SAAF,CAAYR,KAAKS,SAAL,EAAZ,EAA8B,UAACC,GAAD,EAAMC,WAAN,EAAmBC,GAAnB,EAA2B;AAC/D,YAAMZ,OAAO8B,qBACV,GAAEC,MAAO,GAAEpC,EAAEqC,UAAF,CAAapB,GAAb,CAAkB,EADnB,EAEXD,YAAYX,IAFD,CAAb;AAIA,YAAIA,IAAJ,EAAUU,IAAIE,GAAJ,IAAW,EAAEZ,IAAF,EAAX;AACX,OANO;AAFwB,KAA3B,CAAP;AAUD,GAXM,MAWA,IAAIA,gBAAgBZ,WAApB,EAAiC;AACtC,QAAM6B,YAAYjB,KAAKC,MAAvB;AACA,QAAMgC,cAAcH,qBAAsB,GAAEC,MAAO,UAA/B,EAA0Cd,SAA1C,CAApB;AACA,QAAMiB,cAAcD,cAAcA,YAAYxB,SAAZ,EAAd,GAAwC,EAA5D;;AAEA,WAAO,IAAI3B,sBAAJ,CAA2B;AAChCkC,YAAMnB,eAAgB,GAAEkC,MAAO,WAAzB,CAD0B;AAEhCxB,yCACK2B,WADL;AAEEC,YAAI,EAAEnC,MAAM,IAAIZ,WAAJ,CAAgB6B,SAAhB,CAAR;AAFN;AAFgC,KAA3B,CAAP;AAOD,GAZM,MAYA,IAAIjB,gBAAgBV,cAApB,EAAoC;AACzC,WAAOwC,qBAAqBC,MAArB,EAA6B/B,KAAKC,MAAlC,CAAP;AACD;;AAED,SAAO,IAAP;AACD;;AAED,SAASmC,+BAAT,CACEL,MADF,EAEE/B,IAFF,EAGEqC,IAHF,EAIE;AACA,MAAIrC,gBAAgBT,iBAAhB,IAAqCS,gBAAgBZ,WAAzD,EAAsE;AACpEiD,SAAKC,IAAL,CAAUP,MAAV;AACD,GAFD,MAEO,IAAI/B,gBAAgBlB,sBAApB,EAA4C;AACjDa,MAAE4C,IAAF,CAAOvC,KAAKS,SAAL,EAAP,EAAyB,UAACE,WAAD,EAAcC,GAAd,EAAsB;AAC7CwB,sCACG,GAAEL,MAAO,MAAKnB,GAAI,EADrB,EAEED,YAAYX,IAFd,EAGEqC,IAHF;AAKD,KAND;AAOD,GARM,MAQA,IAAIrC,gBAAgBV,cAApB,EAAoC;AACzC8C,oCAAgCL,MAAhC,EAAwC/B,KAAKC,MAA7C,EAAqDoC,IAArD;AACD;AACF;;AAED;AACO,SAASzD,mCAAT,OAGC;AAAA,MAFN2B,MAEM,QAFNA,MAEM;AAAA,2BADNiC,QACM;AAAA,MADNA,QACM,iCADM,EACN;;AACN,MAAMC,iBAAiB,EAAvB;AACA,MAAMC,OAAO,EAAb;;AAEA/C,IAAE4C,IAAF,CAAOhC,MAAP,EAAe,UAACI,WAAD,EAAcC,GAAd,EAAsB;AACnC,QAAM+B,YAAYzC,mBAAmBS,YAAYX,IAA/B,EAAqC,IAAIM,GAAJ,EAArC,CAAlB;AACA,QAAMsC,cACJD,aAAab,qBAAqBnC,EAAEqC,UAAF,CAAapB,GAAb,CAArB,EAAwC+B,SAAxC,CADf;;AAGA,QAAI,CAACC,WAAL,EAAkB;;AAElBH,mBAAe3C,UAAUc,GAAV,CAAf,IAAiC,EAAEZ,MAAM4C;;AAEzC;AAFiC,KAAjC,CAGA,IAAIJ,QAAJ,EAAc;AACZJ,sCAAgCxB,GAAhC,EAAqC+B,SAArC,EAAgDD,IAAhD;AACD;AACF,GAbD;;AAeA,SAAO,EAAED,cAAF,EAAkBC,IAAlB,EAAP;AACD","file":"infer-graphql-input-fields-from-fields.js","sourcesContent":["// @flow\n\nconst {\n  GraphQLInputObjectType,\n  GraphQLBoolean,\n  GraphQLString,\n  GraphQLFloat,\n  GraphQLInt,\n  GraphQLID,\n  GraphQLList,\n  GraphQLEnumType,\n  GraphQLNonNull,\n  GraphQLScalarType,\n  GraphQLObjectType,\n  GraphQLInterfaceType,\n  GraphQLUnionType,\n} = require(`graphql`)\n\nimport type { GraphQLInputType, GraphQLType } from \"graphql\"\n\nconst _ = require(`lodash`)\nconst report = require(`gatsby-cli/lib/reporter`)\nconst createTypeName = require(`./create-type-name`)\nconst createKey = require(`./create-key`)\n\ntype GraphQLNullableInputType<T> =\n  | GraphQLScalarType\n  | GraphQLEnumType\n  | GraphQLInputObjectType\n  | GraphQLList<T>\n\nfunction makeNullable(type: GraphQLInputType): GraphQLNullableInputType<any> {\n  if (type instanceof GraphQLNonNull) {\n    return type.ofType\n  }\n  return type\n}\n\nfunction convertToInputType(\n  type: GraphQLType,\n  typeMap: Set\n): ?GraphQLInputType {\n  // track types already processed in current tree, to avoid infinite recursion\n  if (typeMap.has(type)) {\n    return null\n  }\n  const nextTypeMap = new Set([...typeMap, type])\n\n  if (type instanceof GraphQLScalarType || type instanceof GraphQLEnumType) {\n    return type\n  } else if (type instanceof GraphQLObjectType) {\n    const fields = _.transform(type.getFields(), (out, fieldConfig, key) => {\n      const type = convertToInputType(fieldConfig.type, nextTypeMap)\n      if (type) out[key] = { type }\n    })\n    if (Object.keys(fields).length === 0) {\n      return null\n    }\n    return new GraphQLInputObjectType({\n      name: createTypeName(`${type.name}InputObject`),\n      fields,\n    })\n  } else if (type instanceof GraphQLList) {\n    let innerType = convertToInputType(type.ofType, nextTypeMap)\n    return innerType ? new GraphQLList(makeNullable(innerType)) : null\n  } else if (type instanceof GraphQLNonNull) {\n    let innerType = convertToInputType(type.ofType, nextTypeMap)\n    return innerType ? new GraphQLNonNull(makeNullable(innerType)) : null\n  } else {\n    let message = type ? `for type: ${type.name}` : ``\n    if (type instanceof GraphQLInterfaceType) {\n      message = `GraphQLInterfaceType not yet implemented ${message}`\n    } else if (type instanceof GraphQLUnionType) {\n      message = `GraphQLUnionType not yet implemented ${message}`\n    } else {\n      message = `Invalid input type ${message}`\n    }\n    report.verbose(message)\n  }\n\n  return null\n}\n\nconst scalarFilterMap = {\n  Int: {\n    eq: { type: GraphQLInt },\n    ne: { type: GraphQLInt },\n  },\n  Float: {\n    eq: { type: GraphQLFloat },\n    ne: { type: GraphQLFloat },\n  },\n  ID: {\n    eq: { type: GraphQLID },\n    ne: { type: GraphQLID },\n  },\n  String: {\n    eq: { type: GraphQLString },\n    ne: { type: GraphQLString },\n    regex: { type: GraphQLString },\n    glob: { type: GraphQLString },\n  },\n  Boolean: {\n    eq: { type: GraphQLBoolean },\n    ne: { type: GraphQLBoolean },\n  },\n}\n\nfunction convertToInputFilter(\n  prefix: string,\n  type: GraphQLInputType\n): ?GraphQLInputObjectType {\n  if (type instanceof GraphQLScalarType) {\n    const name = type.name\n    const fields = scalarFilterMap[name]\n\n    if (fields == null) return null\n    return new GraphQLInputObjectType({\n      name: createTypeName(`${prefix}Query${name}`),\n      fields: fields,\n    })\n  } else if (type instanceof GraphQLInputObjectType) {\n    return new GraphQLInputObjectType({\n      name: createTypeName(`${prefix}{type.name}`),\n      fields: _.transform(type.getFields(), (out, fieldConfig, key) => {\n        const type = convertToInputFilter(\n          `${prefix}${_.upperFirst(key)}`,\n          fieldConfig.type\n        )\n        if (type) out[key] = { type }\n      }),\n    })\n  } else if (type instanceof GraphQLList) {\n    const innerType = type.ofType\n    const innerFilter = convertToInputFilter(`${prefix}ListElem`, innerType)\n    const innerFields = innerFilter ? innerFilter.getFields() : {}\n\n    return new GraphQLInputObjectType({\n      name: createTypeName(`${prefix}QueryList`),\n      fields: {\n        ...innerFields,\n        in: { type: new GraphQLList(innerType) },\n      },\n    })\n  } else if (type instanceof GraphQLNonNull) {\n    return convertToInputFilter(prefix, type.ofType)\n  }\n\n  return null\n}\n\nfunction extractFieldNamesFromInputField(\n  prefix: string,\n  type: GraphQLInputType,\n  accu: string[]\n) {\n  if (type instanceof GraphQLScalarType || type instanceof GraphQLList) {\n    accu.push(prefix)\n  } else if (type instanceof GraphQLInputObjectType) {\n    _.each(type.getFields(), (fieldConfig, key) => {\n      extractFieldNamesFromInputField(\n        `${prefix}___${key}`,\n        fieldConfig.type,\n        accu\n      )\n    })\n  } else if (type instanceof GraphQLNonNull) {\n    extractFieldNamesFromInputField(prefix, type.ofType, accu)\n  }\n}\n\n// convert output fields to output fields and a list of fields to sort on\nexport function inferInputObjectStructureFromFields({\n  fields,\n  typeName = ``,\n}: any) {\n  const inferredFields = {}\n  const sort = []\n\n  _.each(fields, (fieldConfig, key) => {\n    const inputType = convertToInputType(fieldConfig.type, new Set())\n    const inputFilter =\n      inputType && convertToInputFilter(_.upperFirst(key), inputType)\n\n    if (!inputFilter) return\n\n    inferredFields[createKey(key)] = { type: inputFilter }\n\n    // Add sorting (but only to the top level).\n    if (typeName) {\n      extractFieldNamesFromInputField(key, inputType, sort)\n    }\n  })\n\n  return { inferredFields, sort }\n}\n"]}